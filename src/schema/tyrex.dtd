<?xml version="1.0" encoding="UTF-8"?>
<!-- 

     To use this DTD use the following document type:

       <!DOCTYPE server PUBLIC "-//EXOLAB/Tyrex Configuration DTD Version 1.0//EN"
                               "http://tyrex.exolab.org/tyrex.dtd">

     or the following XML schema:

       <!DOCTYPE server PUBLIC "-//EXOLAB/Tyrex Configuration Schema Version 1.0//EN"
                               "http://tyrex.exolab.org/tyrex.xsd">

     The recommended namespace prefix is 'tyrex'. The namespace URI is

       http://tyrex.exolab.org/tyrex

 -->


<!--
    Defines the configuration of the transaction server.

    The transaction server consists of any number of transaction
    domains. Transaction policy, limits, resources and environment
    variables are defined in the transaction domain.
 -->

<!ELEMENT server ( domain* )>
<!ATTLIST server
    vendor  CDATA #IMPLIED
    version CDATA #IMPLIED>


<!--
    Defines the configuration of a transaction domain.

    Transaction domains are referenced by their name which must be
    unique across all domains defined in the same server.

    Each domain defines its own policy regarding transaction handling,
    its own transaction processing limits, a set of interceptors and
    the resources and environment variables mappings for applications
    running in that domain.

    The default policy and TP limits are used if the configuration
    does not supply one. Resources can be shared across domains by
    using XML entities or through the include element.

    For example the following default domain specifies 30 seconds as
    the default timeout for all transactions, and an upper limit of
    200 concurrent transactions:

      <tyrex:domain name="default">
        <tyrex:policy trans-timeout="30"/>
        <tyrex:limits upper-limit="200"/>
        . . .
      </tyrex:domain>
 -->

<!ELEMENT domain ( description?, policy?, limits?,
                   interceptor*, resources* )>
<!ATTLIST domain name
    ID #REQUIRED>


<!--
    Defines the policy for handling transactions in this domain.

    The transaction timeout defines the longest duration which a
    transaction is allowed to take before it automatically times out
    and is rolled back. The transaction timeout is specified in
    seconds and can be changed programatically through JTA.

    Nested transactions are disabled by default. This is the preferred
    behavior for EJB and Servlet environments.

    The kill thread policy allows Tyrex to terminate threads
    associated with a transaction that has timed out. This policy
    allows for better TP monitoring, but must be used with care.
 -->

<!ELEMENT policy EMPTY>
<!ATTLIST policy
    trans-timeout CDATA "30"
    allow-nested (true|false) "false"
    kill-thread (true|false) "false">


<!--
    Associates an interceptor with the domain.

    Any number of interceptors may be used in a single domain. The
    interceptor is defined by class name, followed by a param element
    and any number of parameters based on the interceptor's API.

    For example, to use the ErrorLogger interceptor and send errors
    to the given log file:

      <tyrex:interceptor class-name="tyrex.tools.ErrorLogger">
        <tyrex:param file="/var/log/tyrex-error.log" append="true"/>
      </tyrex:interceptor>
 -->

<!ELEMENT interceptor ( param+ )>
<!ATTLIST interceptor
    class-name CDATA #REQUIRED>


<!--
    Defines the resources and environment entries that are exposed
    to applications running in this domain.

    The same set of applications may run in multiple transaction
    domains. Resources definitions can be included in multiple domains
    either through XML entities are using the include element. The
    include element specifies the name of an external document having
    resources as its root element.

    For example, the following resources definition includes an
    external resources file:

      <tyrex:resources>
        <tyrex:include>resources.xml</tyrex:include>
      </tyrex:resources>

    The resources file consists of a single resources element
    describing the actual resources and environment variables, e.g:

      <tyrex:resources>
        <tyrex:resource res-name="jdbc/mydb"
                        res-type="javax.sql.DataSource">
        . . . 
        <tyrex:env-entry>
          <tyrex:env-entry-name>TaxRate</tyrex:env-entry-name>
        . . .
      </tyrex:resources>
 -->

<!ELEMENT resources ( include*, ( resource | env-entry )* )>
<!ELEMENT include (#PCDATA)>


<!--
    Defines a resource exposed to the application.

    The application will signal it's intention to use the named
    resource through the res-ref element in the deployment descriptor.
    Tyrex will then match the resource against the application based
    on the resource name (res-name), type, authentication and optional
    application path.

    Tyrex uses the resource type to identify the factory that will
    serve resources of that type, configures the factory using
    parameters supplied in the param element, and places resource
    limitations defined in the limits element.

    For example, the following resource maps 'jdbc/mydb' to a
    PostgreSQL datasource that connects to the test database, placing
    the upper limits on open connections at 100 and the initial pool
    size at 10:

      <tyrex:resource res-name="jdbc/mydb"
                      res-type="postgresql.PostgresqlDataSource">
        <tyrex:param database-name="test" user="test" password="test"/>
        <tyrex:limits upper-limit="100" initial-size="10"/>
      </tyrex:resource>

    Note that the resource type must be an implementation of the
    interface specified in the application's deployment descriptor.
    For a JDBC DataSource, the application descriptor will use the
    resource type "javax.sql.DataSource".

    In addition the authentication scheme must be the same in both
    deployment descriptor and the resource element. Two authentication
    schemes are supported, container authentication and application
    authentication. It is recommended to always use container
    authentication for application portability.

    Two applications may request to use the same resource by name,
    but may be configured to use a different factory or resource
    limits. This can be accomplished by specifying multiple resources
    with the same name but different application paths. For example,
    the following resource is exposed only to Servlets served from
    two particular document bases:

      <tyrex:resource res-name="jdbc/mydb"
                      res-type="postgresql.PostgresqlDataSource">
        . . .
        <tyrex:app-path>admin/*<tyrex:app-path>
        <tyrex:app-path>dev/*<tyrex:app-path>
      </tyrex:resource>
 -->

<!ELEMENT resource ( description?, param, limits?, app-path+ )>
<!ATTLIST resource
    res-name  NMTOKEN #REQUIRED
    res-type  NMTOKEN #REQUIRED
    res-auth  (container|application) "container">


<!--
    Defines an environment entry exposed to the application.

    The application will define a number of environment entries
    through the env-entry element in the deployment descriptor. Some
    of these environment entries will not include a value and one must
    be supplied through this mechanism. Other environment entires will
    include a value and this mechanism may be used to override the
    value specified in the deployment descriptor.

    For example, the following environment entry specifies or
    overrides the sale tax value specified in the application's
    deployment descriptor:

      <tyrex:env-entry>
        <tyrex:env-entry-name>SalesTax</tyrex:env-entry-name>
        <tyrex:env-entry-type>java.lang.Float</tyrex:env-entry-type>
        <tyrex:env-entry-value>0.07</tyrex:env-entry-value>
      </tyrex:env-entry>

    Two applications may request to use the same environment entry by
    name but may be configured to use a different environment entry
    value. This can be accomplished by specifying multiple environment
    entries with the same name but different application paths. See
    the resource element for a detailed description.
 -->

<!ELEMENT env-entry ( description?, env-entry-name,
                      env-entry-type, env-entry-value?, app-path+ )>
<!ELEMENT env-entry-name  (#PCDATA)>
<!ELEMENT env-entry-type  (#PCDATA)>
<!ELEMENT env-entry-value (#PCDATA)>


<!--
    Defines the limits on a resource or transactions in a transaction
    domain.

    Tyrex fulfills the role of a TP monitor allowing the application
    to better utilize the number of resources available to it. This
    is achieved through resource pooling and by placing limits on
    resource consumption.

    For example, a database server may not support more than X
    concurrent connections. An attempt to use more than X concurrent
    connections will result in the failure. By placing a limit on the
    JDBC resource, Tyrex will limit the number of connections open at
    any given time. Instances waiting to open a new connection will
    be blocked until one has become available or until the timeout
    has elapsed.

    Limits can be placed on pooled resources as well as transactions.
    Resource limits are specific to the resource factory. Multiple
    factories may be used with a different set of limits. Transaction
    limits are specific to the transaction domain, multiple domains
    may be used with a different set of limits.

    The upper limit specifies the maximum number of resources that
    may be used at any given time. The minimum size applies to pooled
    resources and will assure that a certain number of resources are
    always available from the pool.

    If the upper limit has been reached, an attempt to acquire a new
    resource or start a new transaction will block until one is
    available or until the wait timeout has elapsed. The wait timeout
    is specified in seconds, with zero used to indicate no timeout.

    At off-peak periods, Tyrex will gradually release pooled resources
    from the resource pool. The gradual release rate is controlled by
    prune factor (specified in percentage) and prune delay (specified
    in seconds.

    For example, the following limits placed on a JDBC DataSource will
    prevent more than 200 concurrent connections, keep the pool at a
    minimum of 20 connections, queue attempts to open new connections
    when the limit has been reached for 10 seconds, and release 5%
    of pooled connections every 60 seconds when resource usage drops:

      <tyrex:limits upper-limit="200" minimum-size="20"
                    wait-timeout="10"
                    prune-factor="0.05" prune-every="60"/>
 -->

<!ELEMENT limits EMPTY>
<!ATTLIST limits
    upper-limit  CDATA #IMPLIED
    minimum-size CDATA #IMPLIED
    wait-timeout CDATA #IMPLIED
    prune-factor CDATA #IMPLIED
    prune-every  CDATA #IMPLIED>


<!--
    Used in resources and environment entries to specify the
    applications to which these resources and entries should be
    exposed.
 -->
<!ELEMENT app-path (#PCDATA)>


<!--
    Used to supply parameters to interceptors and resource factories
    which are not part of the Tyrex configuration. The attribute list
    and element model of the param element depends on the interceptor
    or resource class.
 -->
<!ELEMENT param ANY>


<!--
    Provides a textual description.
 -->
<!ELEMENT description (#PCDATA)>



