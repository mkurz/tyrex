<project name="Tyrex" default="all" basedir="..">

  <target name="init">
    <property name="project" value="tyrex" />

    <property name="source" value="src" />
    <property name="main" value="${source}/main" />
    <property name="etc" value="src/etc" />
    <property name="build" value="build" />
    <property name="classes" value="${build}/classes" />
    <property name="dist" value="dist" />
    <property name="lib" value="lib" />
    <property name="doc" value="src/doc" />
    <property name="schema" value="${source}/schema" />

    <property name="classpath" value="${classpath}:${classes}" />
    <property name="build.compiler" file="classic" />
    <property name="deprecation" value="true" />
    <property file="${etc}/VERSION" />
    <property name="archive" value="${project}-${version}" />
     
  </target>

<!-- 
<property name="build.compiler" value="jikes" />      
-->
 
  <!-- Display all the targets -->
  <target name="targets">
    <echo message=""/>
    <echo message="ANT build for ${project} ${version}"/>
    <echo message=""/>
    <echo message="The following targets are available:"/>
    <echo message="  targets  Lists the build targets"/>
    <echo message="  clean    Cleans the build and distribution directories"/>
    <echo message="  all      Cleans and builds all the packages"/>
    <echo message="  release  Cleans and builds all the release packages"/>
    <echo message="           (JAR, source, doc, tarball) in the dist directory"/>
    <echo message="  main     Builds the main packages (including debugging info)"/>
    <echo message="  tests    Builds the test packages (including debugging info)"/>
    <echo message="  jar      Builds the binary JAR in the dist directory"/>
    <echo message="  doc      Builds the documentation"/>
    <echo message="  api      Builds the API JavaDocs"/>
    <echo message="  javadoc  Builds the full JavaDocs"/>
    <echo message="  source   Builds the source tarball in the dist directory"/>
    <echo message="  tarball  Builds the binary distribution in the dist directory"/>
    <echo message="  cvs      Update the sources from the CVS"/>
    <echo message=""/>
  </target>


  <!-- Prepare target directories -->
  <target name="prepare" depends="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${classes}"/>
    <mkdir dir="${dist}"/>

    <!-- Copy the DTD and schema to the schema directory -->
    <delete  dir="${schema}" />
    <mkdir   dir="${schema}" />

    <copy todir="${schema}">
       <fileset dir="${main}/tyrex/conf" includes="*.dtd,*.xsd" />
    </copy>
  </target>

  <!-- Kill all the directories created in prepare -->
  <target name="clean" depends="init">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>


  <!-- Build all the sources with debug and deprecation -->
  <!--
  <target name="main" depends="prepare">
    <javac srcdir="${main}" destdir="${classes}" excludes="**/package.html"
           classpath="${classpath}" debug="on" deprecation="${deprecation}"
           includes="tyrex/concurrency/**,tyrex/interceptor/**,tyrex/naming/**,tyrex/util/**" />
  </target> 
  
  -->
  
  <target name="main" depends="prepare">
    <javac srcdir="${main}" destdir="${classes}" 
           excludes="**/package.html,**/*.disabled,**/*.disable,**/*.old,tyrex/tools/Tomcat.java,tyrex/jdbc/util/*,tyrex/corba/*"
           classpath="${classpath}" debug="on" deprecation="off" />
    <copy todir="${classes}/tyrex/conf">
       <fileset dir="${main}/tyrex/conf" includes="*.xsd,*.dtd,*.xml" />
    </copy>
  </target>

  <!-- Same as main, but also cleans and additional targets -->
  <target name="all" depends="clean,main,tests"/>

  <!-- Same as main, but optimization, no debug and no deprecation -->
  <target name="main-opt" depends="prepare">
    <javac srcdir="${main}" destdir="${classes}" 
           excludes="**/package.html,**/*.disabled,**/*.disable,**/*.old,tyrex/tools/Tomcat.java,tyrex/jdbc/util/*,tyrex/corba/*"
           classpath="${classpath}" debug="off" deprecation="off" optimize="on" />
    <copy todir="${classes}/tyrex/conf">
       <fileset dir="${main}/tyrex/conf" includes="*.xsd,*.dtd,*.xml" />
    </copy>
  </target>

  <target name="main-iiop" depends="init">
    <javac srcdir="${main}" destdir="${classes}" 
           includes="tyrex/corba/*"/>
  </target>

  <!-- Build the test packages -->
  <target name="tests" depends="prepare">
    <mkdir dir="${build}/tests" />
    <javac srcdir="${source}/tests" destdir="${build}/tests"
           classpath="${classpath}" debug="on" deprecation="${deprecation}" 
           excludes="hidden/**/*,jdbc/spi/*,ots/**" />
  </target>

  <!-- Build the test iiop packages -->
  <target name="tests-iiop" depends="prepare">
    <mkdir dir="${build}/tests" />
    <java classname="org.openorb.compiler.IdlCompiler" fork="yes">
    	<arg line="${source}/tests/ots/idl/test.idl -d ${build}/tests" />
    </java>
    <javac srcdir="${build}/tests" destdir="${build}/tests"
           classpath="${classpath}" debug="on" deprecation="${deprecation}" 
           includes="otstests/**" />
    <javac srcdir="${source}/tests" destdir="${build}/tests"
           classpath="${classpath}" debug="on" deprecation="${deprecation}" 
           includes="ots/**" />    
  </target>

  <!-- Build the JAR file using main-opt -->
  <target name="jar" depends="main-opt">
    <delete   file="${dist}/${archive}.jar" />

    <copyfile src="${source}/etc/MANIFEST.MF" dest="${classes}/MANIFEST.MF" />
    <replace  file="${classes}/MANIFEST.MF" token="$$VERSION$$" value="${version}" />
    <copydir  src="${source}/etc" dest="${classes}" includes="LICENSE,README,CHANGELOG" />

    <jar      jarfile="${dist}/${archive}.jar" basedir="${classes}"
              manifest="${classes}/MANIFEST.MF" includes="LICENSE,README,CHANGELOG,tyrex/**" excludes="tyrex/corba/*" />
    <jar      jarfile="${dist}/connector.jar" basedir="${classes}"
              manifest="${classes}/MANIFEST.MF" includes="tyrex/connector/*.java" />
  </target>

  <target name="iiop" depends="main-iiop">
    <delete   file="${dist}/${archive}-iiop.jar" />
    
    <jar      jarfile="${dist}/${archive}-iiop.jar" basedir="${classes}"
              includes="tyrex/corba/*" />
  </target>

  <!-- Build the documentation -->
  <!-- doc without style
  <target name="doc" depends="prepare">
    <mkdir    dir="${build}/doc" />
    <copydir  src="${doc}" dest="${build}/doc" includes="license.txt,document.dtd" />
    <copydir  src="${doc}/images" dest="${build}/doc/images" />
    <copydir  src="${doc}/style" dest="${build}/doc/style" includes="images/**,*.css" />

    <mkdir    dir="${build}/doc/print" />
    <copydir  src="${doc}" dest="${build}/doc/print" includes="license.txt,document.dtd" />
    <copydir  src="${doc}/images" dest="${build}/doc/print/images" />

    <copydir  src="${schema}" includes="*.dtd,*.xsd" dest="${build}/doc" />
    <replace  file="${build}/doc/index.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/download.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/print/index.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/print/download.html" token="$$VERSION$$" value="${version}" />
  </target>
  -->
  <!--
  <target name="doc" depends="prepare">
    <mkdir    dir="${build}/doc" />
    <style    basedir="${doc}" destdir="${build}/doc" style="style/exolab.xsl"
              includes="**.xml" excludes="style/**,project.xml" />
    <copydir  src="${doc}" dest="${build}/doc" includes="license.txt,document.dtd" />
    <copydir  src="${doc}/images" dest="${build}/doc/images" />
    <copydir  src="${doc}/style" dest="${build}/doc/style" includes="images/**,*.css" />

    <mkdir    dir="${build}/doc/print" />
    <style    basedir="${doc}" destdir="${build}/doc/print" style="style/print.xsl"
              includes="**.xml" excludes="style/**,project.xml" />
    <copydir  src="${doc}" dest="${build}/doc/print" includes="license.txt,document.dtd" />
    <copydir  src="${doc}/images" dest="${build}/doc/print/images" />

    <copydir  src="${schema}" includes="*.dtd,*.xsd" dest="${build}/doc" />
    <replace  file="${build}/doc/index.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/download.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/print/index.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/print/download.html" token="$$VERSION$$" value="${version}" />
  </target>
  -->
  
  <target name="doc" depends="prepare">
    <mkdir    dir="${build}/doc" />
    <style    basedir="${doc}" destdir="${build}/doc" style="style/exolab.xsl"
              includes="**.xml" excludes="style/**,project.xml" processor="xslp" />
    <copydir  src="${doc}" dest="${build}/doc" includes="license.txt,document.dtd" />
    <copydir  src="${doc}/images" dest="${build}/doc/images" />
    <copydir  src="${doc}/style/images" dest="${build}/doc/images" includes="*.gif" />
    <copydir  src="${doc}/style" dest="${build}/doc/" includes="*.css" />

    <copydir  src="${schema}" includes="*.dtd,*.xsd" dest="${build}/doc" />
    <replace  file="${build}/doc/index.html" token="$$VERSION$$" value="${version}" />
    <replace  file="${build}/doc/download.html" token="$$VERSION$$" value="${version}" />

  </target>
  
  <!-- Build the full JavaDocs -->
  <target name="javadoc" depends="prepare">
    <mkdir    dir="${build}/doc" />
    <mkdir    dir="${build}/doc/javadoc" />
    <property name="copyright"
              value="Intalio, Inc. (C) 2000. All rights reserved  http://tyrex.exolab.org" />
    <javadoc  sourcepath="${main}" destdir="${build}/doc/javadoc"
              doctitle="Tyrex JavaDoc" windowtitle="Tyrex JavaDoc" bottom="${copyright}"
              package="true" author="true" version="true" noindex="true"
              packagenames="tyrex.*" />
  </target>

  <!-- Build the API JavaDocs -->
  <target name="api" depends="prepare">
    <mkdir    dir="${build}/doc" />
    <mkdir    dir="${build}/doc/api" />
    <property name="copyright"
              value="Intalio, Inc. (C) 2000. All rights reserved  http://tyrex.exolab.org" />
    <javadoc  sourcepath="${main}" destdir="${build}/doc/api" dir="."
              doctitle="Tyrex API" windowtitle="Tyrex API" bottom="${copyright}"
              public="true" author="true"
              packagenames="tyrex.*" />
  </target>

  <!-- Build the docs, API and full JavaDocs, doc archives -->
  <target name="docs" depends="doc,api,javadoc">
    <zip    zipfile="${dist}/${archive}-doc.zip" basedir="${build}" includes="doc/**" />
    <tar    tarfile="${dist}/${archive}-doc.tar" basedir="${build}" includes="doc/**" />
    <gzip   src="${dist}/${archive}-doc.tar" zipfile="${dist}/${archive}-doc.tgz" />
    <delete file="${dist}/${archive}-doc.tar" />
  </target>



  <!-- Build the source distribution -->
  <target name="source" depends="prepare">
    <delete  file="${dist}/${archive}-src.tgz" />
    <delete  file="${dist}/${archive}-src.zip" />
    <deltree dir="${build}/${archive}" />

    <mkdir   dir="${build}/${archive}" />
    <mkdir   dir="${build}/${archive}/src" />
    <copydir src="${source}" dest="${build}/${archive}/src"
             defaultexcludes="true" />
    <mkdir   dir="${build}/${archive}/lib" />
    <copydir src="${lib}" dest="${build}/${archive}/lib"
             defaultexcludes="true" />
    <copydir src="." dest="${build}/${archive}"
             includes="*.sh,*.bat" />

    <tar     includes="${archive}/**" basedir="${build}"
             tarfile="${dist}/${archive}-src.tar" />
    <gzip    src="${dist}/${archive}-src.tar" zipfile="${dist}/${archive}-src.tgz"/>
    <delete  file="${dist}/${archive}-src.tar" />
    <zip     zipfile="${dist}/${archive}-src.zip" basedir="${build}"
             includes="${archive}/**" />

  </target>



  <!-- Build a full release including JAR, zip/tarball, source and documentation -->
  <target name="release" depends="clean,doc,jar,source,docs,tarball">
  </target>

  <!-- Build the tarball including JAR and all dependent packages -->
  <target name="tarball" depends="prepare,jar">
    <delete  file="${dist}/${archive}.tgz" />
    <delete  file="${dist}/${archive}.zip" />
    <deltree dir="${build}/${archive}" />

    <mkdir   dir="${build}/${archive}" />
    <copydir src="${etc}" dest="${build}/${archive}"
             includes="README,LICENSE,CHANGELOG" />
    <copydir src="${dist}" dest="${build}/${archive}"
             includes="${archive}.jar" />
    <copydir src="${lib}" dest="${build}/${archive}"
             includes="jdbc-se2.0.jar,jndi.jar,jta1.0.1.jar,jaas.jar,jts.jar,xerces.jar" />
    <copydir src="${schema}" dest="${build}/${archive}/schema" />
    <copydir src="${build}/doc" dest="${build}/${archive}/doc" />
    <deltree dir="${build}/${archive}/doc/javadoc" />

    <tar     tarfile="${dist}/${archive}.tar" basedir="${build}"
             includes="${archive}/**" excludes="${archive}/*.tar,${archive}/*.zip" />
    <gzip    src="${dist}/${archive}.tar" zipfile="${dist}/${archive}.tgz" />
    <delete  file="${dist}/${archive}.tar" />

    <zip     zipfile="${dist}/${archive}.zip" basedir="${build}" 
             includes="${archive}/**" excludes="${archive}/*.tar,${archive}/*.tgz" />
  </target>


  <!-- Update the sources from the CVS -->
  <target name="cvs" depends="clean">
    <cvs cvsRoot=":pserver:anoncvs@virtuals.intalio.com:/cvs/${project}"
         dest="." package="${project}" />
  </target>

</project>

