<project name="Tyrex" default="main" basedir="..">

  <property name="source.dir" value="src" />
  <property name="source.main" value="${source.dir}/main" />
  <property name="source.etc" value="${source.dir}/etc" />
  <property name="source.schema" value="${source.dir}/schema" />
  <property name="source.tests" value="${source.dir}/tests" />
  <property name="source.doc" value="${source.dir}/doc" />
  
  <property name="build.dir" value="build" />
  <property name="build.classes" value="${build.dir}/classes" />
  <property name="build.schema" value="${build.dir}/schema" />
  <property name="build.tests" value="${build.dir}/tests" />
  <property name="build.doc" value="${build.dir}/doc" />
  <property name="build.javadoc" value="${build.doc}/javadoc" />
  <property name="build.api" value="${build.doc}/api" />

  <property name="dist.dir" value="dist" />
  <property name="lib.dir" value="lib" />

  <property file="${source.etc}/VERSION" />
  <property name="build.compiler" value="modern" />
  <property name="deprecation" value="false" />


  <patternset id="support.files">
    <include name="**/*.xsd" />
    <include name="**/*.xml" />
    <include name="**/*.xsl" />
    <include name="**/*.properties" />
    <include name="**/*.dtd" />
    <include name="**/tyrex.*" />
  </patternset>
  

  <patternset id="jar.files">
    <include name="LICENSE" />
    <include name="README" />
    <include name="CHANGELOG" />
    <include name="*.properties" />
  </patternset>


  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <tstamp/>
  </target>


  <target name="clean"
          description="Clean the build and distribution package">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>


  <target name="main" depends="prepare"
          description="Build the main packages">
    <!-- build the java files -->
    <javac srcdir="${source.main}"
           destdir="${build.classes}"
           debug="off"
           excludes="tyrex/corba/*,tyrex/connector/*"
           deprecation="${deprecation}">
    </javac>
    
    <!-- copy the support files -->
    <copy todir="${build.classes}">
      <fileset dir="${source.main}">
        <patternset refid="support.files" />
      </fileset>
    </copy>
    <copy todir="${build.classes}">
      <fileset dir="${source.etc}">
        <include name="*.properties" />
      </fileset>
    </copy>
    <copy todir="${build.schema}">
      <fileset dir="${source.schema}">
        <include name="*" />
      </fileset>
    </copy> 

  </target>

  <target name="iiop" depends="prepare">
    <javac srcdir="${source.main}"
           destdir="${build.classes}"
           debug="off"
           includes="tyrex/corba/*"
           deprecation="${deprecation}">
    </javac>
  </target>

  <target name="all" depends="clean,jar,tests"
          description="Cleans and builds all the packages and tests" />

  <target name="tests" depends="prepare"
          description="Builds the tests packages (including debugging info)">
    
    <!-- create the builded tests directory -->
    <mkdir dir="${build.tests}" />
    
    <!-- IDL Compiler -->
    <!--
    <java classname="org.openorb.compiler.IdlCompiler" fork="yes">
    	<arg line="${source.tests}/ots/idl/test.idl -d ${build.tests}" />
    </java>
    -->

    <!-- build the java files -->
    <!--javac srcdir="${source.tests};${build.tests}"
           destdir="${build.tests}"           
           debug="on"
           excludes="naming/**,ots/**,transaction/**,jdbc/**"           
           deprecation="${deprecation}">
    </javac-->
    <javac srcdir="${source.tests};${build.tests}"
           destdir="${build.tests}"           
           debug="on"
           excludes="ots/**"           
           deprecation="${deprecation}">
    </javac>
  </target>
 
  <target name="iiop-jar" depends="iiop">
    <property name="archive" value="${project}-${version}" />
    <jar jarfile="${dist.dir}/${archive}-iiop.jar"
         basedir="${build.classes}"
         manifest="${build.classes}/MANIFEST.MF"
         includes="tyrex/corba/*" />
  </target>

  <target name="jar" depends="main"
          description="Builds the binary JAR in the dist directory">

    <mkdir dir="${dist.dir}"/>

    <!-- set the name of the archive -->
    <property name="archive" value="${project}-${version}" />
    
    <!-- remove the jar and the manifest -->
    <delete file="${dist.dir}/${archive}.jar" />
    <delete file="${build.classes}/MANIFEST.MF" />
    
    <!-- copy the manifest with the classes and set the version number, build number and title -->
    <copy file="${source.etc}/MANIFEST.MF"
          tofile="${build.classes}/MANIFEST.MF" />

    <!-- Include other JAR files -->
    <copy todir="${build.classes}">
      <fileset dir="${source.etc}">
        <patternset refid="jar.files" />
      </fileset>
    </copy>

    <!-- Replace all the tokens -->
    <property name="compile.replace" value="MANIFEST.MF,**/tyrex.config" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$VERSION$$" value="${version}" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$DATE$$" value="${TODAY}" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$TIME$$" value="${TSTAMP}" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$TITLE$$" value="${title}" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$VENDOR.NAME$$" value="${vendor.name}" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$VENDOR.URL$$" value="${vendor.url}" />
    <replace dir="${build.classes}" includes="${compile.replace}"
             token="$$COPYRIGHT$$" value="${copyright}" />        

    <!-- create the Tyrex JAR -->
    <jar jarfile="${dist.dir}/${archive}.jar"
         basedir="${build.classes}"
         manifest="${build.classes}/MANIFEST.MF"
         excludes="MANIFEST.MF,tyrex/corba/*" />

    <!-- create the IIOP JAR -->
    <!-- Removed until we can build the classes
    <jar jarfile="${dist.dir}/${archive}-iiop.jar"
         basedir="${build.classes}"
         manifest="${build.classes}/MANIFEST.MF"
         includes="tyrex/corba/*" />
    -->
  </target>


  <target name="javadoc" depends="prepare"
          description="Builds the full JavaDocs">
    
    <!-- create the javadoc repository -->
    <mkdir dir="${build.doc}" />
    <mkdir dir="${build.javadoc}" />
    
    <!-- build the javadoc -->
    <javadoc sourcepath="${source.main}"
             destdir="${build.javadoc}"
             doctitle="${title} JavaDoc"
             windowtitle="${title} JavaDoc"
             bottom="${copyright}"
             package="true"
             author="true"
             version="true"
             noindex="true"
             packagenames="${all.packages}">
    </javadoc>
  </target>


  <target name="api" depends="prepare"
          description="Builds the API JavaDocs">

    <!-- create the javadoc repository -->
    <mkdir dir="${build.doc}" />
    <mkdir dir="${build.api}" />

    <!-- build the javadoc -->
    <javadoc sourcepath="${source.main}"
             destdir="${build.api}"
             doctitle="${title} API JavaDoc"
             windowtitle="${title} API JavaDoc"
             bottom="${copyright}"
             package="true"
             author="true"
             version="true"
             noindex="true"
             packagenames="${api.packages}">
    </javadoc>
  </target>


  <target name="doc" depends="prepare"
          description="Builds the documentation">
    
    <mkdir dir="${build.doc}" />
    <style basedir="${source.doc}" destdir="${build.doc}"
           style="style/exolab.xsl" processor="xslp">
      <include name="**.xml" />
      <exclude name="style/**" />
      <exclude name="project.xml" />
    </style>

    <copy todir="${build.doc}">
      <fileset dir="${source.doc}">
        <include name="document.dtd" />
        <include name="images/**" />
        <include name="spec/**" />
      </fileset>
      <fileset dir="${source.doc}/style">
        <include name="*.css" />
        <include name="images/**" />
      </fileset>
    </copy>

    <replace dir="${build.doc}" includes="*.html"
             token="$$VERSION$" value="${version}" />
    <replace dir="${build.doc}" includes="*.html"
             token="$$DATE$" value="${TODAY}" />
    <replace dir="${build.doc}" includes="*.html"
             token="$$TIME$" value="${TSTAMP}" />
  </target>                                          


  <!-- Build the source distribution -->
  <target name="source" depends="prepare"
          description="Builds the source distribution">
    <property name="archive" value="${project}-${version}" />
    <delete  file="${dist.dir}/${archive}-src.tgz" />
    <delete  file="${dist.dir}/${archive}-src.zip" />
    <deltree dir="${build.dir}/${archive}" />

    <mkdir   dir="${build.dir}/${archive}" />
    <mkdir   dir="${build.dir}/${archive}/src" />
    <copydir src="${source.dir}" dest="${build.dir}/${archive}/src"
             defaultexcludes="true" />
    <mkdir   dir="${build.dir}/${archive}/lib" />
    <copydir src="${lib.dir}" dest="${build.dir}/${archive}/lib"
             defaultexcludes="true" />
    <copydir src="." dest="${build.dir}/${archive}"
             includes="*.sh,*.bat" />

    <tar     includes="${archive}/**" basedir="${build.dir}"
             tarfile="${dist.dir}/${archive}-src.tar" />
    <gzip    src="${dist.dir}/${archive}-src.tar" zipfile="${dist.dir}/${archive}-src.tgz"/>
    <delete  file="${dist.dir}/${archive}-src.tar" />
    <zip     zipfile="${dist.dir}/${archive}-src.zip" basedir="${build.dir}"
             includes="${archive}/**" />

  </target>


  <target name="release" depends="clean,jar,doc,api,javadoc,source,docs,tarball"
          description="Cleans and builds all the release packages (JAR, source, doc, tarball) in the dist directory" />


  <!-- Build the source distribution -->
  <target name="docs" depends="prepare"
          description="Builds the source distribution">
    <property name="archive" value="${project}-${version}" />
    <property name="dist.dir" value="dist" />
    <delete  file="${dist.dir}/${archive}-src.tgz" />
    <delete  file="${dist.dir}/${archive}-src.zip" />
    <deltree dir="${build.dir}/${archive}" />

    <mkdir   dir="${build.dir}/${archive}" />
    <mkdir   dir="${build.dir}/${archive}/src" />
    <copydir src="${source.dir}" dest="${build.dir}/${archive}/src"
             defaultexcludes="true" />
    <mkdir   dir="${build.dir}/${archive}/lib" />
    <copydir src="${lib.dir}" dest="${build.dir}/${archive}/lib"
             defaultexcludes="true" />
    <copydir src="." dest="${build.dir}/${archive}"
             includes="*.sh,*.bat" />

    <tar     includes="${archive}/**" basedir="${build.dir}"
             tarfile="${dist.dir}/${archive}-src.tar" />
    <gzip    src="${dist.dir}/${archive}-src.tar" zipfile="${dist.dir}/${archive}-src.tgz"/>
    <delete  file="${dist.dir}/${archive}-src.tar" />
    <zip     zipfile="${dist.dir}/${archive}-src.zip" basedir="${build.dir}"
             includes="${archive}/**" />

  </target>


  <!-- Build the tarball including JAR and all dependent packages -->
  <target name="tarball" depends="prepare,jar"
          description="Builds the binary distribution in the dist directory">
    <property name="archive" value="${project}-${version}" />
    <delete  file="${dist.dir}/${archive}.tgz" />
    <delete  file="${dist.dir}/${archive}.zip" />
    <deltree dir="${build.dir}/${archive}" />

    <mkdir   dir="${build.dir}/${archive}" />
    <copydir src="${source.etc}" dest="${build.dir}/${archive}"
             includes="README,LICENSE,CHANGELOG" />
    <copydir src="${dist.dir}" dest="${build.dir}/${archive}"
             includes="${archive}.jar" />
    <copydir src="${dist.dir}" dest="${build.dir}/${archive}"
             includes="${archive}-iiop.jar" />
    <copydir src="${lib.dir}" dest="${build.dir}/${archive}"
             includes="jdbc-se2.0.jar,jndi.jar,jta1.0.1.jar,jts.jar,ots.jar,xerces.jar" />
    <copydir src="${source.schema}" dest="${build.dir}/${archive}/schema" />
    <copydir src="${build.doc}" dest="${build.dir}/${archive}/doc" />
    <deltree dir="${build.dir}/${archive}/doc/javadoc" />

    <tar     tarfile="${dist.dir}/${archive}.tar" basedir="${build.dir}"
             includes="${archive}/**" excludes="${archive}/*.tar,${archive}/*.zip" />
    <gzip    src="${dist.dir}/${archive}.tar" zipfile="${dist.dir}/${archive}.tgz" />
    <delete  file="${dist.dir}/${archive}.tar" />

    <zip     zipfile="${dist.dir}/${archive}.zip" basedir="${build.dir}" 
             includes="${archive}/**" excludes="${archive}/*.tar,${archive}/*.tgz" />
  </target>


</project>

