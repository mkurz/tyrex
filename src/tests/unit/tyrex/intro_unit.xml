<chapter>
    <title>Introduction</title>
    <body>
        <paragraph> 
            <title>Overview</title>
            <body>
                This document defines unit tests for the Tyrex module.

                <p>The Tyrex unit test suite has the following aims:
                <ul>    
                    <li>test for basic capabilities</li>
                    <li>test for any special situation relevant to how it is going to be used</li>
                    <li>test boundary conditions</li>
                    <li>test under higher load</li>
                    <li>negative testing (ensure that the code is not doing things it is not supposed to)</li>
                    <li>80% source code coverage should be achieved by running the test suite</li>
                </ul>
                </p>
            </body>
        </paragraph>
        <paragraph> 
            <title>Implementation</title>
            <body>
                The Unit Test cases will be implemented using the JUnit test framework (http://www.junit.org/), which is a highly visible and well-contributed project.
<p>Each test will be implemented to run as a stand alone test case.</p>
            </body>
        </paragraph>
        <paragraph> 
            <title>Execution</title>
            <body>
                <p>The unit test cases are executed using ant to ensure
consistent use of classpath etc.  The unit tests can be as a whole by
running the command:</p>

<p><tt>build.</tt>{<tt>bat</tt>|<tt>sh</tt>}<tt> run
-Dclass.name=tyrex.Unit</tt></p>

<p>Individual package tests can be run be supplying the package.classname as
argument (e.g. <tt>tyrex.naming.NamingSuite</tt>).  Branches of the tree can be
tested as a whole by providing the branch name as argument
(e.g. <tt>tyrex.naming.NamingUnit</tt> would run all naming tests as well as
any naming. subdirectories if they existed, etc).  Or individual unit tests can
be run by specifying the test name as argument
(e.g. <tt>tyrex.naming.MemoryContextTest</tt>).  After all the tests are
executed the results are displayed to the user.</p>

<p>To produce a list of all test cases that make up the complete unit test
suite run the command:</p>

<p><tt>build.</tt>{<tt>bat</tt>|<tt>sh</tt>}<tt> run
-Dclass.name=tyrex.UnitNames</tt></p>
            </body>
        </paragraph>
        <paragraph> 
            <title>Document creation and maintenance</title>
            <body>
<p>This document is generated by the command:</p>

<p><tt>build.</tt>{<tt>bat</tt>|<tt>sh</tt>}<tt> unittestdoc</tt></p>

<p>The creation process incorporates the file
<tt>src/tests/unit/tyrex/intro_unit.xml</tt> with the files
<tt>src/tests/unit/tyrex/.../package.html</tt> and the javadoc
comments in the test class source files to produce
<tt>build/tests/TyrexUnitTest.xml</tt> and from that
<tt>build/tests/TyrexUnitTest.pdf</tt>.  At this time all xml tags in the
javadoc comments or the xml or html files must have matching end-tags.
Unmatched tags will result in errors in the generation phase.</p>
            </body>
        </paragraph>
        <paragraph> 
            <title>Dependencies</title>
            <body>
                
            </body>
        </paragraph>
        <paragraph>
            <title>Open issues</title>
            <body>
                
            </body>
        </paragraph>
        <paragraph>
            <title>History</title>
                <body>
                    <history>
                        <line>
                            <date>31 July 2001</date>
                            <author>David Mills</author>
                            <comment><i>Created.</i></comment>
                        </line>
                    </history>
                </body>
        </paragraph>

    </body>
</chapter>
