/**
 * Redistribution and use of this software and associated documentation
 * ("Software"), with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1. Redistributions of source code must retain copyright
 *    statements and notices.  Redistributions must also contain a
 *    copy of this document.
 *
 * 2. Redistributions in binary form must reproduce the
 *    above copyright notice, this list of conditions and the
 *    following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. The name "Exolab" must not be used to endorse or promote
 *    products derived from this Software without prior written
 *    permission of Intalio.  For written permission,
 *    please contact info@exolab.org.
 *
 * 4. Products derived from this Software may not be called "Exolab"
 *    nor may "Exolab" appear in their names without prior written
 *    permission of Intalio. Exolab is a registered
 *    trademark of Intalio.
 *
 * 5. Due credit should be given to the Exolab Project
 *    (http://www.exolab.org/).
 *
 * THIS SOFTWARE IS PROVIDED BY INTALIO AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * INTALIO OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Copyright 2000 (C) Intalio Inc. All Rights Reserved.
 *
 * $Id: JNDIDataSourceFactory.disabled,v 1.2 2000/09/08 23:04:44 mohammed Exp $
 */


package tyrex.connector.jdbc;


import javax.sql.XADataSource;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.CompositeName;
import javax.naming.InvalidNameException;
import javax.naming.Name;
import javax.naming.NamingException;
import tyrex.connector.ManagedConnectionFactory;
import tyrex.connector.ConnectionException;


/**
 * This class returns a XA DataSource from a JNDI provider
 *
 * @author <a href="arkin@intalio.com">Assaf Arkin</a>
 * @version $Revision: 1.2 $ $Date: 2000/09/08 23:04:44 $
 */
public class JNDIDataSourceFactory
    extends JDBCManagedConnectionFactory
{
    /**
     * The name of the data source
     */
    private final Name    name;
    /**
     * True if the JNDI context is closed after
     * the XA data source is looked up.
     */
    private final boolean closeContext;


    /**
     * Create the Name from the specified string.
     *
     * @param name the string
     * @return the Name constructed from the 
     *      specified string.
     * @throws InvalidNameException if the string is
     *      not valid.
     */
    private static Name createName(String name)
        throws InvalidNameException
    {
        if (null == name) {
            throw new IllegalArgumentException("The argument 'name' is null.");
        }

        return new CompositeName(name);
    }

    /**
     * Create the JNDIDataSourceFactory that returns the data source
     * with the specified name
     *
     * @param name the name of the data source to look up. Cannot be null.
     * @param closeContext True if the Context is closed after
     *      the data source is retrieved.
     * @throws InvalidNameException if the string is 
     *      not valid.
     */
    public JNDIDataSourceFactory(String name, boolean closeContext)
        throws InvalidNameException
    {
        this(createName(name), closeContext);    
    }


    /**
     * Create the JNDIDataSourceFactory that returns the data source
     * with the specified name
     *
     * @param name the name of the data source to look up. Cannot be null.
     * @param closeContext True if the Context is closed after
     *      the data source is retrieved.
     */
    public JNDIDataSourceFactory(Name name, boolean closeContext)
    {
        if (null == name) {
            throw new IllegalArgumentException("The argument 'name' is null.");
        }

        this.name = name;
        this.closeContext = closeContext;
    }


    /**
     * Return the name of the data source.
     *
     * @return the name of the data source.
     */
    public final Name getName()
    {
        return name;
    }
    
    
    /**
     * Return True if the context is to be closed after
     * the XA data source is looked up.
     *
     * @return True if the context is to be closed after
     *      the XA data source is looked up.
     */
    public final boolean closeContext()
    {
        return closeContext;
    }


    /**
     * Return the context used to lookup the XA 
     * data source.
     *
     * @return the context used to lookup the XA
     *      data source
     * @throws NamingException if a naming exception is
     *      encountered.
     */
    protected Context getContext()
        throws NamingException
    {
        return new InitialContext();
    }


    /**
     * Return the XA data source with the name {@link getName} from
     * the context returned by {@link #getContext}. The context is closed
     * if the method {@link #closeContext} returns true.
     *
     * @throws ConnectionException a problem retrieving
     * the XA data source from the context.
     */
    protected final XADataSource createDataSource()
        throws ConnectionException
    {
        Context ctx = null;
          
        try {
          ctx = getContext();
          return (XADataSource) ctx.lookup(name);
        } 
        catch ( NamingException except ) {
            throw new ConnectionException( except );
        } 
        catch ( ClassCastException except ) {
            throw new ConnectionException( "DataSource " + name + " is not an XADataSource" );
        }
        finally {
            if (closeContext && (null != ctx)) {
                try {
                    ctx.close();    
                }
                catch (NamingException e) {
                    throw new ConnectionException(e);
                }
            }
        }
    }
}
