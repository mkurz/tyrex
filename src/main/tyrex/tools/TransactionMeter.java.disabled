/**
 * Redistribution and use of this software and associated documentation
 * ("Software"), with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1. Redistributions of source code must retain copyright
 *    statements and notices.  Redistributions must also contain a
 *    copy of this document.
 *
 * 2. Redistributions in binary form must reproduce the
 *    above copyright notice, this list of conditions and the
 *    following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. The name "Exolab" must not be used to endorse or promote
 *    products derived from this Software without prior written
 *    permission of Intalio.  For written permission,
 *    please contact info@exolab.org.
 *
 * 4. Products derived from this Software may not be called "Exolab"
 *    nor may "Exolab" appear in their names without prior written
 *    permission of Intalio. Exolab is a registered
 *    trademark of Intalio.
 *
 * 5. Due credit should be given to the Exolab Project
 *    (http://www.exolab.org/).
 *
 * THIS SOFTWARE IS PROVIDED BY INTALIO AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * INTALIO OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Copyright 2000 (C) Intalio Inc. All Rights Reserved.
 *
 * $Id: TransactionMeter.java.disabled,v 1.2 2000/09/08 23:06:29 mohammed Exp $
 */


package tyrex.tools;


import javax.transaction.xa.Xid;
import tyrex.connector.Interceptor;


/**
 *
 * @author <a href="arkin@intalio.com">Assaf Arkin</a>
 * @version $Revision: 1.2 $ $Date: 2000/09/08 23:06:29 $
 */
public class TransactionMeter
    implements Interceptor
{


    private long  _createdCount;
    private long  _
    private long  _committedCount;
    private long  _rolledbackCount;
    private long  _timedOutCount;
    private long  _inconsistentCount;
    private long  _activeCount;


    public void begin( Xid xid )
    {
	++ _createdCount;
    }
    
    
    public void commit( Xid xid )
    {
	++ _committedCount;
    }
    
    
    public void rollback( Xid xid )
    {
	++ _rolledbackCount;
    }
    
    
    public void completed( Xid xid, int heuristic )
    {
	switch ( heuristic ) {
	case Heuristic.TimedOut:
	    ++ _timedOutCount;
	break;
	case Heuristic.Hazard:
	case Heuristic.Mixed:
	    ++ _inconsistentCount;
	break;
	}
    }
    
    
    public void resume( Xid xid, Thread thread )
    {
	++ _activeCount;
    }
    

    public void suspend( Xid xid, Thread thread )
    {
	-- _activeCount;
    }





    static class MeterDataFeeder
	extends StatusDataFeed
    {


	public static final int TYPE_ACTIVE = 0;
	public static final int TYPE_TOTAL = 1;
	public static final int TYPE_CREATED = 2;
	public static final int TYPE_KILLED = 3;


	private String _desc;


	private String _title;


	private Meter   _meter;


	private int     _last;


	private int     _maximum;


	private int     _type;


	MeterDataFeeder( String title, String desc, int type, int maximum )
	{
	    _title = title;
	    _desc = desc;
	    _type = type;
	    _maximum = maximum;
	    _meter = new Meter();
	}


	public String getDescription()
	{
	    return _desc;
	}


	public String getTitle()
	{
	    return _title;
	}


	public float getPercent()
	{
	    int result;

	    switch ( _type ) {
	    case Type.Active:
		return  getActiveCountPct();
	    case Type.Total:
		return getTotalCountPct();
	    case Type.Created:
		result = ( (int) _meter.getCreatedCounter() - _last );
		_last = (int) _meter.getCreatedCounter();
		if ( result > _maximum )
		    _maximum = result * 10;
		return (float) result / (float) _maximum;
	    case Type.Killed:
		result = ( (int) _meter.getTerminatedCounter() - _last );
		_last = (int) _meter.getTerminatedCounter();
		if ( result > _maximum )
		    _maximum = result * 10;
		return (float) result / (float) _maximum;
	    default:
		return 0F;
	    }

	}


	public Number getActual()
	{
	    int result;
		
	    switch ( _type ) {
	    case TYPE_ACTIVE:
		return new Integer( _meter.getActiveCount() );
	    case TYPE_TOTAL:
		return new Integer( _meter.getTotalCount() );
	    case TYPE_CREATED:
		result = ( (int) _meter.getCreatedCounter() - _last );
		return new Integer( result );
	    case TYPE_KILLED:
		result = ( (int) _meter.getTerminatedCounter() - _last );
		return new Integer( result );
	    default:
		return new Integer( 0 );
	    }
	}



    }


}
