<?xml version="1.0"?>
<!-- $Id: configuration.xml,v 1.7 2002/04/17 00:34:16 mohammed Exp $ -->
<document>
  <properties>
    <title>Tyrex Configuration</title>
    <author email="arkin@intalio.com">Assaf Arkin</author>
  </properties>

  <body>

    <section title="Configuration File">

      <p>When Tyrex is instantiated, it reads configuration properties from the Tyrex
       configuration file. The Tyrex configuration file is called <tt>tyrex.config</tt>.</p>

      <p>The configuration file is loaded in the following manner. First, a default
        configuration file is loaded from the Tyrex JAR. This file provides the minimum
        set of default values required by Tyrex, including such data as the version number.</p>

      <p>If a configuration file called <tt>tyrex.config</tt> exists in the class path,
        it will be loaded next. This file can override any values specified in the default
        configuration file.</p>

      <p>The name of the configuration file can be specified using the system property
        <tt>tyrex.config</tt>. The following example illustrates how to set the system
        property:
        <code><![CDATA[
java -Dtyrex.config=tyrex.config $1 ]]></code></p>        

      <p>The following properties are supported in the current version of Tyrex:
        <ul>
          <li><b><tt>tyrex.log.verbose</tt></b> Specifies whether to run Tyrex in verbose
            mode. When this property is set to <tt>true</tt>, Tyrex will emit additional
            information to the log to assist in troubleshtooting and debugging. It is
            recommended to leave this property to the default value (<tt>false</tt>)
            in a deployment environment.</li>
          <li><b><tt>tyrex.log.console</tt></b> Specifies whether to enable console logging.
            When this property is set to <tt>true</tt> (the default), Tyrex will emit
            various information (in both verbose and non-verbose mode) to the console.</li>
          <li><b><tt>tyrex.clock.unsynchTicks</tt></b> Determines the number of clocks ticks
            to skip before incrementing the internal clock. The value of this property is
            an integer, the precision is milliseconds. The default value is <tt>100</tt>
            milliseconds.</li>
          <li><b><tt>tyrex.clock.synchEvery</tt></b> Determines the number of unsynchronized
            cycles before synchronizing the clock. The value of this property is an integer
            that, when multiplied by <tt>tyrex.clock.unsynchTicks</tt>, determines the clock
            synchronization interval (in milliseconds). The default value is <tt>10</tt>
            cycles.</li>
          <li><b><tt>tyrex.random.secure</tt></b> Determines whether to use secure
            (cryptographic quality) or standard (pseudo) random number generator. Setting this
            property to <tt>true</tt> assures that random numbers are truely random, but
            results in a longer statup sequence. The default value is <tt>false</tt>.</li>
          <li><b><tt>tyrex.uuid.stateFile</tt></b> The name of the UUID state file, see
            <a href="#UUID State File">UUID State File</a> for more information. The default
            value is <tt>uuid.state</tt>.</li>
          <li><b><tt>tyrex.domain.files</tt></b> Specifies the name of the default domain
            configuration file(s). This property is a list of file names that must be
            accessible from the current directory. All domain configuration files specified
            in this property will be loaded automatically by Tyrex. If this property is missing,
            Tyrex loads up with no transaction domain.</li>
        </ul></p>

      <p>The following example illustrates a Tyrex configuration file:
        <code><![CDATA[
tyrex.log.verbose=false
tyrex.log.console=true

tyrex.clock.unsynchTicks=100
tyrex.clock.synchEvery=10
tyrex.random.secure=true
tyrex.uuid.stateFile=uuid.state
tyrex.domain.files=domain.xml ]]></code></p>

    </section>


    <section title="UUID State">

      <p>The Tyrex UUID generator is used for producing Universally Unique IDentifiers.
        UUIDs are 128 bit values guaranteed to be unique across all servers and applications.
        They are used for transaction identifiers, and by applications that rely on this
        service to produce unique identifiers.</p>

      <p>In order to guarantee uniqueness, the UUID generator utilizes three parameters:
        the system clock, clock sequence and node identifier. The system clock simulates
        a resolution of 100 nanoseconds, allowing nearly ten thousand UUIDs to be generated
        in a second.</p>

      <p>The <i>clock sequence</i> protects against a retarding clock. The clock may be set
        backwards accidentaly. or as a result of server down time. Day light savings time has
        no effect on the clock, but clustered servers will seldom have a synchronized clock.
        The clock sequence is automatically incremented each time Tyrex is started, rolling
        over after 8192 restarts.</p>
      
      <p>The <i>node identifier</i> guarantees uniqueness across servers. The node idenifier
        if a 47 bit value set from the IEEE 802 address of the network card. Each network card
        has a universally unique 47 bit identifier. Where multiple network cards are installed,
        any one card can be used.</p>

      <p>When installing Tyrex for the first time, the network card address is obtained and
        placed in the UUID state file. To obtain the network address under Linux/UNIX, run
        <tt>ifconfig</tt> from the root account. To obtain the network card address under
        Windows 2000, open a DOS window and type <tt>ipconfig /all</tt>.</p>

      <p>The clock sequence can be set to any arbitrary value between 0 and 8192, but must
        have no correlation with the network card address to be unique. If no value is placed,
        the initial value will be randomly generated.</p>

      <p>The following example illustrates the contents of a UUID state file generated from
        the network card address <tt>08:00:46:08:64:C3</tt> with a clock sequence of 100. 
      <code>
uuid.nodeIdentifier=08:00:46:08:64:C3
uuid.clockSequence=100</code></p>

      <p>The UUID state file is typically located in the installation directory of Tyrex,
        under the name <tt>uuid.state</tt>. The location and name of the file can be
        controlled using the configuration property <tt>tyrex.uuid.stateFile</tt>.</p>

      <p>If the UUID state file could not be located, Tyrex will use random values for
        both the node identifier and clock sequence. Different random values will be
        generated each time Tyrex is used to assure uniquness. In a deployment environment
        it is important to gurantee that both values are truely unique. If the network
        card address is unavailable, use cryptographic quality random number generator by
        setting the configuration property <tt>tyrex.random.secure</tt> to true.</p>
      
      <p>Using the cryptographic quality random number generator will slow the initialization
        process. It is recommended to leave this property unset in a development environment.</p>
      
    </section>


    <section title="Domain Configuration">

      <p>A <i>Transaction Domain</i> provides centralized management for transactions.
        A transaction domain defines the policy for all transactions created from that domain,
        such as default timeout, maximum number of open transactions, IIOP support, and
        journaling. In addition, the domain maintains resource managers such as JDBC data
        sources and JCA connectors.</p>

      <p>Transaction domains are created from domain configuraiton files. The domain configuration
        file defines the properties for the specific transaction domain, and configures all the
        JDBC data sources and JCA connectors available in that domain.</p>

      <p>The transaction domain configuration file is an XML document with the following structure:
        <table>
          <tr>
            <td><tt>domain</tt></td>
            <td></td>
            <td>Top level element</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;name</tt></td>
            <td><i>required</i></td>
            <td>The name of the domain</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;maximum</tt></td>
            <td><i>optional</i></td>
            <td>Maximum number of open transactions allowed</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;timeout</tt></td>
            <td><i>optional</i></td>
            <td>Default timeout for transactions, in seconds</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;journalFactory</tt></td>
            <td><i>optional</i></td>
            <td>Implementation of transaction journal factory</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;resources</tt></td>
            <td><i>optional</i></td>
            <td>Top level element for list of JDBC data sources and JCA connectors</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;&#160;&#160;dataSource</tt></td>
            <td><i>zero or more</i></td>
            <td>Specification for a JDBC data source</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;&#160;&#160;connector</tt></td>
            <td><i>zero or more</i></td>
            <td>Specification for a JCA connector</td>
          </tr>
        </table>
      </p>

      <p>One <tt>dataSource</tt> element is used for each configured JDBC data
        source. The <tt>dataSource</tt> element takes the following strcture:
        <table>
          <tr>
            <td><tt>dataSource</tt></td>
            <td></td>
            <td>Top level element for each JDBC data source specification</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;name</tt></td>
            <td><i>required</i></td>
            <td>The name of the data source</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;jar</tt></td>
            <td><i>required</i></td>
            <td>The name of the data source JAR</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;paths</tt></td>
            <td><i>optional</i></td>
            <td>Paths to additional JARs and dependent files</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;class</tt></td>
            <td><i>required</i></td>
            <td>The data source implementation class name</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;config</tt></td>
            <td><i>optional</i></td>
            <td>Configuration for the JDBC data source</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;limits</tt></td>
            <td><i>optional</i></td>
            <td>Resource limit for the JDBC connection pool</td>
          </tr>
        </table>
      </p>

      <p>One <tt>connector</tt> element is used for each configured JCA connector.
        The <tt>connector</tt> element takes the following strcture:
        <table>
          <tr>
            <td><tt>connector</tt></td>
            <td></td>
            <td>Top level element for each JCA connector specification</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;name</tt></td>
            <td><i>required</i></td>
            <td>The name of the connector source</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;jar</tt></td>
            <td><i>required</i></td>
            <td>The name of the connector RAR</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;paths</tt></td>
            <td><i>optional</i></td>
            <td>Paths to additional JARs and dependent files</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;config</tt></td>
            <td><i>optional</i></td>
            <td>Configuration for the connection factory</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;limits</tt></td>
            <td><i>optional</i></td>
            <td>Resource limit for the JCA connection pool</td>
          </tr>
        </table>
      </p>

      <p>Connection pool limits are specified using the <tt>limits</tt> element
        that takes the following strcture:
        <table>
          <tr>
            <td><tt>limits</tt></td>
            <td></td>
            <td>Top level element for each connection pool limits specification</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;maximum</tt></td>
            <td><i>optional</i></td>
            <td>Maximum number of connections allowed</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;minimum</tt></td>
            <td><i>optional</i></td>
            <td>Minimum number of connections to keep in the pool</td>>
          </tr>
          <tr>
            <td><tt>&#160;&#160;initial</tt></td>
            <td><i>optional</i></td>
            <td>Initial size of pool</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;maxRetain</tt></td>
            <td><i>optional</i></td>
            <td>Maximum duration to retain open connections, in seconds</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;timeout</tt></td>
            <td><i>optional</i></td>
            <td>Maximum timeout waiting for a new connection, in seconds</td>
          </tr>
          <tr>
            <td><tt>&#160;&#160;trace</tt></td>
            <td><i>optional</i></td>
            <td>True to enable tracing</td>
          </tr>
        </table>
      </p>

      <section title="Element definition">

      <p>The various elements of the domain configuration file are explained in
        more detail below.</p>

      <h4>domain</h4>
      
      <p>The top level element of each domain configuration file. A domain configuration
        file can specify exactly one transaction domain.</p>

      <h4>domain/name</h4>

      <p>Each transaction domain must have a unique name in the system. Tyrex will not
        allow two transaction domains with the same name to be configured. Domain names
        are used for logging messages, and should be kept short.</p>
      
      <h4>domain/maximum</h4>

      <p>The maximum number of open transactions supported by this domain. Tyrex will
        make sure this limit is not exceeded by blocking any attempt to create more
        transactions than the maximum allowed limit. This limit only applies to concurrently
        open (not committed or rolledback) top-level transactions.</p>

      <p>If this element is missing, the default value (zero) is assumed, meaning no limit
        is placed on the number of concurrently open transaction.</p>

      <h4>domain/timeout</h4>

      <p>The default timeout for all transactions, specified in seconds. Timeouts are used
        to detect and cancel blocked transactions. A different value can be specified at
        runtime using one of the JTA or OTS interfaces.</p>

      <p>If this element is missing, the default (120 seconds) is assumed. It is recommended
        to set this value to a reasonable range that allows all transactions to complete,
        but does not allow blocked transactions to lock resources indefinitely.</p>

      <h4>domain/journalFactory</h4>

      <p>Specifies the transaction journal factory to use. If this element is missing,
        journaling is not enabled for this transaction domain.</p>

      <h4>domain/resources</h4>

      <p>Lists zero or more JDBC data sources and JCA connectors that are available as
        resource managers in this transaction domain. Order is not important.</p>

      <h4>resources/dataSource</h4>

      <p>The <tt>dataSource</tt> element configures a single JDBC 2.0 (or 3.0) data
        source as a resource manager in this transaction domain. It provides specification
        of the JDBC provider, default configuration, and connection pool limits.</p>

      <h4>resources/connector</h4>

      <p>The <tt>connector</tt> element configures a single JCA 1.0 connector as a
        resource manager in this transaction domain. It provides specification
        of the JCA provider, default configuration, and connection pool limits.</p>

      <h4>[dataSource|connector]/name</h4>

      <p>Specifies the name by which the data source or connector resource will be known.
        The resource name will be used to obtain an instance from the transaction domain
        and for debugging purposes. It should be short and must be unique within this
        transaction domain.</p>

      <p>The resource name is different than the JNDI name by which the application will
        obtain a connection factory from the JNDI Environment Naming Context.</p>

      <h4>[dataSource|connector]/jar</h4>

      <p>File name or URL of the JAR file containing the JDBC driver, or the RAR file
        containing the JCA connector. A relative file name is located in the current working
        directory. An absolute file name or HTTP/FTP URL can be used as well. Only a single
        JAR or RAR file can be specified, and must contain the JDBC driver or JCA connector.</p>

      <h4>[dataSource|connector]/paths</h4>

      <p>List of files names or URLs to additional JARs, libraries and support files required
        by a JDBC driver of JCA connector. Colon or semi-colon separators can be used.</p>

      <h4>dataSource/class</h4>

      <p>The class of the data source implementation for a JDBC driver. When using an XA-capable
        data source, this should be a class implementing <tt>javax.sql.XADataSource</tt>.
        When using a non-XA data source, this should be a class implementing <tt>javax.sql.PoolConnectionDataSource</tt>.</p>

      <p>This element is only used for JDBC data sources. JCA connectors specify the connection
        factory class in a deployment file contained within the JCA RAR.</p>

      <h4>[dataSource|connector]/config</h4>

      <p>Configures the JDBC data source or JCA connector. This element contains a list
        of properties that match to the Bean-like <tt>get/set</tt> methods of the JDBC
        <tt>DataSource</tt> or JCA <tt>ManagedConnectionFactory</tt>.</p>

      <h4>[dataSource|connector]/limits</h4>

      <p>Defines the connection pool limits placed on a JDBC data source or JCA connector.
        If this element is missing or empty, the default limits apply.</p>

      <h4>limits/maximum</h4>

      <p>Maximum number of open connections allowed. Most systems impose a limit on the
        number of connections that can be open at any one time. When this limit is reached,
        the application will block until a connection becomes available or a timeout occurs.</p>

      <p>If this element is missing, the default (zero) is assumed, implying that no
        limit is placed on the number of open connections.</p>

      <h4>limits/minimum</h4>

      <p>Minimum number of connections to keep in the pool. The pool will discard connections
        that have not been used for more than the specified <tt>maxRetain</tt> duration.
        Even so, the pool will keep the minimum number of connections specified to guarantee
        a reasonable respnse time when new connections are required.</p>
      
      <p>If this element is missing, the default (zero) is assumed, and the connection pool
        is allowed to shrink to zero connections.</p>

      <h4>limits/initial</h4>

      <p>The initial number of connections to create. When the pool is first created it will
        open up the specified number of connections. Even if this value is zero, one connection
        will always be created for access to meta-data information.</p>

      <p>If this element is missing, the default (zero) is assumed, and only one connection
        will be created, as required for meta-data access.</p>

      <h4>limits/maxRetain</h4>

      <p>The maximum duration to retain unused connections, in seconds. When a connection
        is returned to the pool, it will be retained for that duration before being
        discarded. The application may obtain the connection from the pool before this
        time has elapsed.</p>

      <p>A high retain timeout allows the application to response better to changing loads,
        but may result in resource starvation for other applications using the same resource
        manager. This value should also take into account any idle timeout imposed on connections.</p>

      <p>If this element is missing, the default (zero) is assumed, causing connections to
        be kept in the pool forever.</p>

      <h4>limits/timeout</h4>

      <p>The timeout waiting for a new connection, in seconds. If the maximum limit has been
        reached, Tyrex will block the application until a connection becomes available, or
        the timeout has been reached.</p>

      <p>If this element is missing, the default (zero) is assumed, meaning that the application
        will not be blocked and an exception will be thrown immediately if the maximum limit
        has been reached.</p>

      <h4>limits/trace</h4>

      <p>Request tracing. If the value of this element is true, Tyrex will log all usage of
        the JDBC data source or JCA connector.</p>
        
      </section>

      <section title="Example">

        <p>The following example illustrates a domain configuration file using Sybase jConnect 5.2:
          <code>
&lt;domain&gt;
  &lt;name&gt;default&lt;/name&gt;
<comment>  &lt;!-- Limit to 50 concurrent transactions --&gt;</comment>
  &lt;maximum&gt;50&lt;/maximum&gt;
<comment>  &lt;!-- Default transaction timeout: 2 minutes --&gt;</comment>
  &lt;timeout&gt;120&lt;/timeout&gt;
  &lt;resources&gt;
<comment>    &lt;!-- Specification for data source myDb --&gt;</comment>
    &lt;dataSource&gt;
      &lt;name&gt;myDb&lt;/name&gt;
      &lt;jar&gt;jconnect_5.2.jar&lt;/jar&gt;
      &lt;class&gt;com.sybase.jdbc2.jdbc.SybXADataSource&lt;/class&gt;
      &lt;config&gt;
<comment>        &lt;!-- Configuration for SybXADataSource --&gt;</comment>
        &lt;user&gt;arkin&lt;/user&gt;
        &lt;password&gt;secret&lt;/password&gt;
        &lt;serverName>tyrex.exolab.org&lt;/serverName&gt;
        &lt;postNumber&gt;4100&lt;/portNumber&gt;
      &lt;/config&gt;
      &lt;limits&gt;
<comment>        &lt;!-- Start with 5 connections, never go below 5,
             and never go above 50 --&gt;</comment>
        &lt;maximum&gt;50&lt;/maximum&gt;
        &lt;minimum&gt;5&lt;/minimum&gt;
        &lt;initial&gt;5&lt;/initial&gt;
<comment>        &lt;!-- Discard connections idle for 5 minutes --&gt;</comment>
        &lt;maxRetain&gt;300&lt;/maxRetain&gt;
<comment>        &lt;!-- If maximum reached, block for 10 seconds --&gt;</comment>
        &lt;timeout&gt;10&lt;/timeout&gt;
      &lt;/limits&gt;
    &lt;/dataSource&gt;
  &lt;/resources&gt;
&lt;/domain&gt;</code> 
        </p>
      </section>

    </section>
    
    
  </body>
</document>
