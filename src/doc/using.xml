<?xml version="1.0"?>
<!-- $Id: using.xml,v 1.5 2001/03/21 20:02:40 arkin Exp $ -->
<document>
  <properties>
    <title>Using Tyrex</title>
    <author email="arkin@intalio.com">Assaf Arkin</author>
  </properties>

  <body>

    <section title="Transaction Domains">
      
      <p>A <api>tyrex.tm.TransactionDomain</api> provides centralized management for transactions.
        A transaction domain defines the policy for all transactions created from that domain,
        such as default timeout, maximum number of open transactions, IIOP support, and journaling.
        In addition, the domain maintains resource managers such as JDBC data sources and JCA
        connectors.</p>
      
      <p>The application server obtains the transaction manager, user transaction and transaction
        factory from the transaction domain. It also uses the transaction domain to obtain
        connection factories and place them in the JNDI Environment Naming Context.</p>

      <p>Transaction domains are created from domain configuration files. The structure and
        values of the domain configuration file is specified in <a href="configuration.html">Tyrex
          Configuration</a>.</p>

      <p>The following example illustrates how to create a new transaction domain from the
        domain configuration file <tt>domain.xml</tt> located in the current directory:
        <code>
TransactionDomain domain;

<comment>// Create a transaction domain using
// a domain configuration file</comment>
try {
    domain = TransactionDomain.createDomain( "domain.xml" );
} catch ( DomainConfigurationException except ) {
    <comment>// Domain cannot be created, handle error</comment>
    . . . 
}
<comment>// Recover all resources used in the domain</comment>
try {
    domain.recover();
} catch ( RecoveryException except ) {
    while ( except != null ) {
        System.out.println( "Recovery error: " + except );
        except = except.getNextException();
    }
}
<comment>// Domain is now active and ready for use</comment>
        </code></p>
      
    </section>


    <section title="Resources">

      <p>The object <api>tyrex.resource.Resources</api> represents a collection of installed
        resources managers. Resources, such as JDBC data sources and JCA connectors, are
        configured based on their specification in the domain configuration file. In addition,
        resources can be added and removed at run-time.</p>

      <p>Each resource manager is represented by an object of type <api>tyrex.resource.Resource</api>.
        Each such object represents a single installed resource. The application server uses
        these objects to interact with the resource manager, and expose the resource manager
        to the client application.</p>

      <p>An installed resource has a client factory that is exposed to the application from
        the JNDI Environment Naming Context. The client factory type depends on the resource
        type, e.g. a JDBC <tt>DataSource</tt>, a JCA CCI <tt>ConnectionFactory</tt>, etc.</p>

      <p>An installed resource has a connection pool that manages utilization of connections.
        The connection pool is not directly accessible to the application, but the usage
        metrics are accessible from <api>tyrex.resource.PoolMetrics</api>. Usage metrics
        includes such information as the number of connections created and released over
        a period of time, average duration for using or holding a connection in the pool, etc.</p>

      <p><api>tyrex.resource.PoolLimits</api> represents limits placed on the connection
        pool. These limits restrict the maximum number of connections that can be used at
        any one time, define the minimum number of connections to retain in the pool, the
        duration for retaining connections in the pool between uses, and more.</p>

    </section>
    

    <section title="The Runtime Context">

      <p><api>tyrex.tm.RuntimeContext</api> provides an association between a component or a client,
        the current thread, and the resources accessed by that thread.</p>

      <p>The runtime context keeps track of open transactions, JNDI Environment Naming Context,
        security subject, resource managers and open connector. It is managed for a given component
        or client, and can be preserved across method calls in different threads, by associating
        and dissociating it from the current thread.</p>

      <p>Each thread is associated with one runtime context at any given time. A new runtime context
        can be created using one of the <tt>newRuntimeContext()</tt> methods, and populated with JNDI
        bindings and a security context. The runtime context is then associated/dissociated with the
        current thread across method invocations using the <tt>setRuntimeContext()</tt> and
        <tt>unsetRuntimeContext()</tt> methods.</p>

      <p>The runtime context association works like a stack. Calling <tt>setRuntimeContext()</tt>
        pushes the current runtime context up the stack, and associates the thread with the current
        runtime context. Calling <tt>unsetRuntimeContext()</tt> pops the previous runtime context
        from the stack and associates it with the thread. A thread will always have a runtime
        context created on demand, if <tt>setRuntimeContext()</tt> was not called explicitly.</p>

      <p>The runtime context keeps track of the current open transaction. When the runtime context
        is associated with the current thread, this is the same transaction on which the transaction
        manager operates.</p>
        
      <p>The runtime context keeps track of the JNDI Environment Naming Context. When the runtime
        context is associated with the current thread, the same bindings will be accessible to the
        application from the <tt>java:</tt> URL.</p>

      <p>The runtime context keeps track of the security subject used for authentication and
        authorization. When the runtime context is associated with the current thread, this subject
        is used to authenticate the caller against resource managers and other services.</p>

      <p>The runtime context keeps track of all connections opened from connection pools obtained
        from the JNDI Environment Naming Context. Open connections and their transaction association
        is maintained across method invocations through the runtime context.</p>
      
      <p>The following example illustrates how the application server will create and use a runtime
        context:
        <code>
RuntimeContext runCtx;
Context        jndiCtx;
Resources      resources;
DataSource     dataSource;

<comment>// Create a new context</comment>
runCtx = RuntimeContext.newRuntimeContext();

<comment>// Create the context 'comp/env/jdbc'</comment>
jndiCtx = runCtx.getEnvContext();
jndiCtx = jndiCtx.createSubcontext( "comp" );
jndiCtx = jndiCtx.createSubcontext( "env" );
jndiCtx = jndiCtx.createSubcontext( "jdbc" );

<comment>// Obtain resources from the transaction domain
// Obtain the client factory for 'db1'</comment>
resources = TransactionDomain.getDomain( "myDomain" ).
    getResources();
dataSource = (DataSource) resources.getResource( "db1" );
<comment>// Bind 'db1' as 'comp/env/jdbc/myDb'</comment>
jndiCtx.bind( "myDb", dataSource );

. . .
<comment>// Associate the runtime context with
// the current thread</comment>
RuntimeContext.setRuntimeContext( runCtx );

. . .
<comment>// Dissociate the runtime context with
// the current thread</comment>
RuntimeContext.unsetRuntimeContext();

. . .
<comment>// Discard the runtime context</comment>
runCtx.cleanup();
        </code></p>

      <p>The following example illustrates how the application obtains a new JDBC connection
        from the data source previously listed in the JNDI context:<code>
InitialContext initCtx;
String         jndiName;
DataSource     dataSource;
Connection     conn;

<comment>// Application code to access the database</comment>
initCtx = new InitialContext();
jndiName = "java:comp/env/jdbc/myDb";
dataSource = (DataSource) initCtx.lookup( jndiName );
conn = dataSource.getConnection();
        </code></p>

    </section>


    <section title="JTA Extended Interfaces">

      <p>All Tyrex transactions implement the extended interface <api>tyrex.tm.TyrexTransaction</api>,
        which supports asynchronous commit and rollback, one-phase commit, access to the parent
        transaction and transaction identifier, etc.</p>

      <p>The Tyrex transaction manager implements the extended interface <api>tyrex.tm.TyrexTransactionManager</api>,
        which allows transactions to be resolved from an identifier, and provides additional
        management and resource association methods.</p>
      
      <p>Interceptors allow an external engine to hook up into the transaction monitor and either
        record the outcome of transactions or affect them. The interceptor is notified when
        transactions are created, attempt to commit, rolled back, and when they are resumed or
        suspended from threads.</p>

    </section>


  </body>
</document>
